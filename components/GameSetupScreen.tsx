
import React from 'react';
import type { GameSettings } from '../types';
import { PLAYER_PERSONALITIES } from '../constants';

interface GameSetupScreenProps {
    goHome: () => void;
    gameSettings: GameSettings;
    handleInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
    initializeGame: () => void;
    isLoading: boolean;
    handleFetchSuggestions: (fieldType: 'theme' | 'setting') => void;
    isFetchingSuggestions: boolean;
    handleGenerateBackstory: () => void;
    isGeneratingContent: boolean;
    handleGenerateDifficultyDescription: () => void;
    isGeneratingDifficultyDesc: boolean;
    addInitialWorldElement: () => void;
    removeInitialWorldElement: (id: string) => void;
    handleInitialElementChange: (index: number, event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
    handleGenerateInitialElementDescription: (index: number) => void;
    isGeneratingInitialElementDesc: { [key: string]: boolean };
    handleGenerateGoal: () => void;
    isGeneratingGoal: boolean;
    handleGenerateCharacterName: () => void;
    isGeneratingCharacterName: boolean;
    handleGenerateInitialSkill: () => void;
    isGeneratingInitialSkill: boolean;
}

const GameSetupScreen: React.FC<GameSetupScreenProps> = ({ 
    goHome, gameSettings, handleInputChange, initializeGame, isLoading, 
    handleFetchSuggestions, isFetchingSuggestions, handleGenerateBackstory, isGeneratingContent, 
    handleGenerateDifficultyDescription, isGeneratingDifficultyDesc, addInitialWorldElement, 
    removeInitialWorldElement, handleInitialElementChange, handleGenerateInitialElementDescription,
    isGeneratingInitialElementDesc, handleGenerateGoal, isGeneratingGoal,
    handleGenerateCharacterName, isGeneratingCharacterName, handleGenerateInitialSkill, isGeneratingInitialSkill
}) => (
    <div className="min-h-screen bg-gray-800 text-white p-4 md:p-6 flex flex-col items-center">
      <div className="w-full max-w-3xl bg-gray-700 p-4 sm:p-6 md:p-8 rounded-xl shadow-2xl relative">
        <button onClick={goHome} className="absolute top-4 left-4 text-purple-400 hover:text-purple-300 text-sm flex items-center bg-gray-600 hover:bg-gray-500 p-2 rounded-lg shadow transition-colors">
            ‚Ü©Ô∏è V·ªÅ Trang Ch·ªß
        </button>
        <h2 className="text-3xl sm:text-4xl font-bold text-purple-400 mb-8 text-center pt-10 sm:pt-0">Ki·∫øn T·∫°o Th·∫ø Gi·ªõi C·ªßa B·∫°n</h2>
                
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6 mb-6">
            <div className="space-y-6">
                <fieldset className="border border-gray-600 p-4 rounded-lg">
                    <legend className="text-xl font-semibold text-pink-400 px-2">üìú B·ªëi C·∫£nh Truy·ªán</legend>
                    <div className="mt-2 space-y-4">
                        <div>
                            <label htmlFor="theme" className="block text-lg font-medium text-gray-300 mb-1">Ch·ªß ƒê·ªÅ:</label>
                            <div className="flex items-center gap-2">
                                <input type="text" name="theme" id="theme" value={gameSettings.theme} onChange={handleInputChange} placeholder="VD: Ti√™n hi·ªáp, Huy·ªÅn huy·ªÖn..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-pink-500 focus:border-pink-500" />
                                <button onClick={() => handleFetchSuggestions('theme')} disabled={isFetchingSuggestions} className="p-3 bg-pink-600 hover:bg-pink-700 rounded-lg disabled:bg-gray-500" title="‚ú® G·ª£i √Ω Ch·ªß ƒë·ªÅ">
                                    {isFetchingSuggestions ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                </button>
                            </div>
                        </div>
                        <div>
                            <label htmlFor="setting" className="block text-lg font-medium text-gray-300 mb-1">Th·∫ø Gi·ªõi/B·ªëi C·∫£nh Chi Ti·∫øt:</label>
                            <div className="flex items-center gap-2">
                                <input type="text" name="setting" id="setting" value={gameSettings.setting} onChange={handleInputChange} placeholder="VD: ƒê·∫°i L·ª•c Phong V√¢n..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-pink-500 focus:border-pink-500" />
                                <button onClick={() => handleFetchSuggestions('setting')} disabled={isFetchingSuggestions} className="p-3 bg-pink-600 hover:bg-pink-700 rounded-lg disabled:bg-gray-500" title="‚ú® G·ª£i √Ω B·ªëi c·∫£nh">
                                    {isFetchingSuggestions ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                </button>
                            </div>
                        </div>
                    </div>
                </fieldset>

                <fieldset className="border border-gray-600 p-4 rounded-lg">
                    <legend className="text-xl font-semibold text-teal-400 px-2">üé≤ ƒê·ªô Kh√≥ & N·ªôi Dung</legend>
                    <div className="mt-2 space-y-4">
                        <div>
                            <label htmlFor="difficulty" className="block text-lg font-medium text-gray-300 mb-1">Ch·ªçn ƒê·ªô Kh√≥:</label>
                            <select name="difficulty" id="difficulty" value={gameSettings.difficulty} onChange={handleInputChange} className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-teal-500 focus:border-teal-500">
                                <option value="D·ªÖ">D·ªÖ - D√†nh cho ng∆∞·ªùi m·ªõi</option>
                                <option value="Th∆∞·ªùng">Th∆∞·ªùng - C√¢n b·∫±ng, ph√π h·ª£p ƒëa s·ªë</option>
                                <option value="Kh√≥">Kh√≥ - Th·ª≠ th√°ch cao, c·∫ßn t√≠nh to√°n</option>
                                <option value="√Åc M·ªông">√Åc M·ªông - C·ª±c k·ª≥ kh√≥</option>
                                <option value="Tu·ª≥ Ch·ªânh AI">Tu·ª≥ Ch·ªânh AI - ƒê·ªÉ AI m√¥ t·∫£</option>
                            </select>
                        </div>
                        {(gameSettings.difficulty === "Tu·ª≥ Ch·ªânh AI" || gameSettings.difficultyDescription) && (
                            <div>
                                <label htmlFor="difficultyDescription" className="block text-lg font-medium text-gray-300 mb-1">M√¥ T·∫£ ƒê·ªô Kh√≥:</label>
                                <div className="flex items-center gap-2">
                                    <textarea name="difficultyDescription" id="difficultyDescription" value={gameSettings.difficultyDescription} onChange={handleInputChange} rows={2} placeholder="AI s·∫Ω m√¥ t·∫£ ƒë·ªô kh√≥ ·ªü ƒë√¢y..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-teal-500 focus:border-teal-500" />
                                    {gameSettings.difficulty === "Tu·ª≥ Ch·ªânh AI" && (
                                        <button onClick={handleGenerateDifficultyDescription} disabled={isGeneratingDifficultyDesc} className="p-3 bg-teal-600 hover:bg-teal-700 rounded-lg disabled:bg-gray-500 self-start" title="‚ú® AI T·∫°o M√¥ T·∫£ ƒê·ªô Kh√≥">
                                            {isGeneratingDifficultyDesc ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                        </button>
                                    )}
                                </div>
                            </div>
                        )}
                        <div className="flex items-center mt-3">
                            <input type="checkbox" name="allowNsfw" id="allowNsfw" checked={gameSettings.allowNsfw} onChange={handleInputChange} className="h-5 w-5 text-red-500 bg-gray-600 border-gray-500 rounded focus:ring-red-600 focus:ring-offset-gray-800" />
                            <label htmlFor="allowNsfw" className="ml-2 text-sm font-medium text-gray-300">Cho ph√©p n·ªôi dung 18+ (C·ª±c k·ª≥ chi ti·∫øt)</label>
                        </div>
                         <p className="text-xs text-gray-400 italic">Khi tick ch·ªçn, AI s·∫Ω ƒë∆∞·ª£c khuy·∫øn kh√≠ch t·∫°o n·ªôi dung khi√™u d√¢m, b·∫°o l·ª±c c·ª±c ƒëoan m·ªôt c√°ch tr·∫ßn tr·ª•i v√† chi ti·∫øt h∆°n.</p>
                    </div>
                </fieldset>
            </div>

            <div className="space-y-6">
                 <fieldset className="border border-gray-600 p-4 rounded-lg">
                    <legend className="text-xl font-semibold text-sky-400 px-2">üë§ Nh√¢n V·∫≠t Ch√≠nh</legend>
                    <div className="mt-2 space-y-4">
                        <div>
                            <label htmlFor="characterName" className="block text-lg font-medium text-gray-300 mb-1">Danh X∆∞ng/T√™n:</label>
                             <div className="flex items-center gap-2">
                                <input type="text" name="characterName" id="characterName" value={gameSettings.characterName} onChange={handleInputChange} placeholder="VD: Di·ªáp Ph√†m, H√†n L·∫≠p..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500" />
                                <button onClick={handleGenerateCharacterName} disabled={isGeneratingCharacterName} className="p-3 bg-sky-600 hover:bg-sky-700 rounded-lg disabled:bg-gray-500" title="‚ú® G·ª£i √Ω T√™n Nh√¢n V·∫≠t">
                                    {isGeneratingCharacterName ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                </button>
                            </div>
                        </div>
                         <div>
                            <label htmlFor="characterPersonality" className="block text-lg font-medium text-gray-300 mb-1">T√≠nh C√°ch:</label>
                            <select name="characterPersonality" id="characterPersonality" value={gameSettings.characterPersonality} onChange={handleInputChange} className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500">
                                {PLAYER_PERSONALITIES.map(p => <option key={p} value={p}>{p}</option>)}
                            </select>
                            {gameSettings.characterPersonality === "T√πy Ch·ªçn" && (
                                <input
                                    type="text"
                                    name="customPersonality"
                                    id="customPersonality"
                                    value={gameSettings.customPersonality || ''}
                                    onChange={handleInputChange}
                                    placeholder="Nh·∫≠p t√≠nh c√°ch t√πy ch·ªânh c·ªßa b·∫°n..."
                                    className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500 mt-2"
                                />
                            )}
                        </div>
                        <div>
                            <label htmlFor="characterGender" className="block text-lg font-medium text-gray-300 mb-1">Gi·ªõi T√≠nh:</label>
                            <select name="characterGender" id="characterGender" value={gameSettings.characterGender} onChange={handleInputChange} className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500">
                                <option value="Kh√¥ng x√°c ƒë·ªãnh">Kh√¥ng x√°c ƒë·ªãnh / ƒê·ªÉ AI quy·∫øt ƒë·ªãnh</option>
                                <option value="Nam">Nam</option>
                                <option value="N·ªØ">N·ªØ</option>
                                <option value="Kh√°c">Kh√°c</option>
                            </select>
                        </div>
                        <div>
                            <label htmlFor="narrationStyle" className="block text-lg font-medium text-gray-300 mb-1">G√≥c nh√¨n:</label>
                            <select name="narrationStyle" id="narrationStyle" value={gameSettings.narrationStyle} onChange={handleInputChange} className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500">
                                <option value="G√≥c nh√¨n th·ª© ba (M·∫∑c ƒë·ªãnh)">G√≥c nh√¨n th·ª© ba (M·∫∑c ƒë·ªãnh)</option>
                                <option value="G√≥c nh√¨n th·ª© nh·∫•t (T√¥i)">G√≥c nh√¨n th·ª© nh·∫•t (T√¥i)</option>
                            </select>
                        </div>
                        <div>
                            <label htmlFor="characterBackstory" className="block text-lg font-medium text-gray-300 mb-1">S∆° L∆∞·ª£c Ti·ªÉu S·ª≠:</label>
                            <div className="flex items-center gap-2">
                                <textarea name="characterBackstory" id="characterBackstory" value={gameSettings.characterBackstory} onChange={handleInputChange} rows={3} placeholder="VD: M·ªôt ph·∫ø v·∫≠t mang huy·∫øt m·∫°ch th∆∞·ª£ng c·ªï..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500"></textarea>
                                <button onClick={handleGenerateBackstory} disabled={isGeneratingContent} className="p-3 bg-sky-600 hover:bg-sky-700 rounded-lg disabled:bg-gray-500 self-start" title="‚ú® T·∫°o Ti·ªÉu s·ª≠">
                                    {isGeneratingContent ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                </button>
                            </div>
                        </div>
                        <div>
                            <label htmlFor="preferredInitialSkill" className="block text-lg font-medium text-gray-300 mb-1">K·ªπ NƒÉng Kh·ªüi ƒê·∫ßu (T√πy ch·ªçn):</label>
                            <div className="flex items-center gap-2">
                                <input type="text" name="preferredInitialSkill" id="preferredInitialSkill" value={gameSettings.preferredInitialSkill} onChange={handleInputChange} placeholder="VD: Thu·∫≠t ·∫©n th√¢n..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-sky-500 focus:border-sky-500" />
                                <button onClick={handleGenerateInitialSkill} disabled={isGeneratingInitialSkill} className="p-3 bg-sky-600 hover:bg-sky-700 rounded-lg disabled:bg-gray-500" title="‚ú® G·ª£i √Ω K·ªπ nƒÉng">
                                    {isGeneratingInitialSkill ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                </button>
                            </div>
                             <p className="text-xs text-gray-400 mt-1 italic">G·ª£i √Ω cho AI v·ªÅ lo·∫°i k·ªπ nƒÉng b·∫°n mu·ªën b·∫Øt ƒë·∫ßu.</p>
                        </div>
                    </div>
                </fieldset>

                <fieldset className="border border-red-500/70 p-4 rounded-lg bg-gray-700/20">
                    <legend className="text-xl font-semibold text-red-400 px-2 flex items-center">üéØ M·ª•c Ti√™u/ƒê·ªông L·ª±c</legend>
                    <div className="mt-3 space-y-3">
                        <div className="flex items-center">
                            <input type="checkbox" name="useCharacterGoal" id="useCharacterGoal" checked={gameSettings.useCharacterGoal} onChange={handleInputChange} className="h-5 w-5 text-red-500 bg-gray-600 border-gray-500 rounded focus:ring-red-600 focus:ring-offset-gray-800" />
                            <label htmlFor="useCharacterGoal" className="ml-2 text-sm font-medium text-gray-300">Th√™m M·ª•c Ti√™u/ƒê·ªông L·ª±c</label>
                        </div>
                        {gameSettings.useCharacterGoal && (
                            <div>
                                <label htmlFor="characterGoal" className="block text-lg font-medium text-gray-300 mb-1">M·ª•c Ti√™u/ƒê·ªông L·ª±c:</label>
                                <div className="flex items-center gap-2">
                                    <textarea name="characterGoal" id="characterGoal" value={gameSettings.characterGoal} onChange={handleInputChange} rows={3} placeholder="VD: Tr·∫£ th√π cho gia t·ªôc..." className="w-full p-3 bg-gray-600 border border-gray-500 rounded-lg focus:ring-red-500 focus:border-red-500" />
                                    <button onClick={handleGenerateGoal} disabled={isGeneratingGoal} className="p-3 bg-red-600 hover:bg-red-700 rounded-lg disabled:bg-gray-500 self-start" title="‚ú® AI G·ª£i √ù M·ª•c Ti√™u">
                                        {isGeneratingGoal ? <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                    </button>
                                </div>
                                <p className="text-xs text-gray-400 mt-1 italic">M·ª•c ti√™u n√†y s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn suy nghƒ© v√† h√†nh ƒë·ªông c·ªßa nh√¢n v·∫≠t.</p>
                            </div>
                        )}
                    </div>
                </fieldset>
            </div>
        </div>

        <fieldset className="border-2 border-lime-600 p-4 rounded-lg mb-6 bg-gray-700/30">
            <legend className="text-xl font-semibold text-lime-300 px-2 flex items-center">
                üèõÔ∏è Ki·∫øn T·∫°o Th·∫ø Gi·ªõi Ban ƒê·∫ßu (T√πy ch·ªçn)
            </legend>
            <div className="mt-3 space-y-4">
                {gameSettings.initialWorldElements.map((element, index) => (
                    <div key={element.id} className="p-3 bg-gray-600/50 rounded-lg border border-gray-500">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-2">
                            <div>
                                <label htmlFor={`elementName-${index}`} className="block text-sm font-medium text-gray-300 mb-1">T√™n Th·ª±c Th·ªÉ:</label>
                                <input type="text" id={`elementName-${index}`} name="name" value={element.name} onChange={(e) => handleInitialElementChange(index, e)} placeholder="VD: L√£o Ma ƒê·∫ßu..." className="w-full p-2 bg-gray-500 border border-gray-400 rounded-md focus:ring-lime-500 focus:border-lime-500 text-sm" />
                            </div>
                            <div>
                                <label htmlFor={`elementType-${index}`} className="block text-sm font-medium text-gray-300 mb-1">Lo·∫°i Th·ª±c Th·ªÉ:</label>
                                <select id={`elementType-${index}`} name="type" value={element.type} onChange={(e) => handleInitialElementChange(index, e)} className="w-full p-2 bg-gray-500 border border-gray-400 rounded-md focus:ring-lime-500 focus:border-lime-500 text-sm">
                                    <option value="NPC">Nh√¢n V·∫≠t (NPC)</option>
                                    <option value="LOCATION">ƒê·ªãa ƒêi·ªÉm</option>
                                    <option value="ITEM">V·∫≠t Ph·∫©m (Lore)</option>
                                </select>
                            </div>
                             <div className="md:col-span-2"> 
                                <label htmlFor={`elementPersonality-${index}`} className="block text-sm font-medium text-gray-300 mb-1">T√≠nh C√°ch (N·∫øu l√† NPC):</label>
                                <input type="text" id={`elementPersonality-${index}`} name="personality" value={element.personality || ''} onChange={(e) => handleInitialElementChange(index, e)} placeholder="VD: L·∫°nh l√πng, ƒêa nghi..." className="w-full p-2 bg-gray-500 border border-gray-400 rounded-md focus:ring-lime-500 focus:border-lime-500 text-sm" />
                            </div>
                            <div className="md:col-span-2"> 
                                <label htmlFor={`elementDesc-${index}`} className="block text-sm font-medium text-gray-300 mb-1">M√¥ T·∫£ Th·ª±c Th·ªÉ:</label>
                                <div className="flex items-start gap-2">
                                    <textarea id={`elementDesc-${index}`} name="description" value={element.description} onChange={(e) => handleInitialElementChange(index, e)} rows={2} placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ th·ª±c th·ªÉ n√†y..." className="w-full p-2 bg-gray-500 border border-gray-400 rounded-md focus:ring-lime-500 focus:border-lime-500 text-sm" />
                                    <button onClick={() => handleGenerateInitialElementDescription(index)} disabled={isGeneratingInitialElementDesc[element.id] || !element.name} className="p-2.5 bg-lime-600 hover:bg-lime-700 rounded-md disabled:bg-gray-500 self-center" title="‚ú® AI T·∫°o M√¥ T·∫£ Th·ª±c Th·ªÉ">
                                        {isGeneratingInitialElementDesc[element.id] ? <div className="w-4 h-4 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : '‚ú®'}
                                    </button>
                                </div>
                            </div>
                        </div>
                        <button onClick={() => removeInitialWorldElement(element.id)} className="mt-1 text-xs bg-red-700 hover:bg-red-800 text-white py-1 px-2 rounded-md flex items-center">
                           üóëÔ∏è X√≥a
                        </button>
                    </div>
                ))}
                <button onClick={addInitialWorldElement} className="w-full mt-2 py-2 px-4 bg-lime-700 hover:bg-lime-800 text-white font-semibold rounded-lg shadow-md flex items-center justify-center text-sm">
                    ‚ûï Th√™m Th·ª±c Th·ªÉ
                </button>
            </div>
        </fieldset>

        <button onClick={initializeGame} disabled={isLoading} className="w-full mt-6 bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all transform hover:scale-105 text-xl disabled:from-gray-500 disabled:to-gray-600 disabled:cursor-not-allowed flex items-center justify-center">
          ‚ûï {isLoading ? 'ƒêang Kh·ªüi T·∫°o...' : 'Kh·ªüi T·∫°o Th·∫ø Gi·ªõi'}
        </button>
      </div>
    </div>
  );
  
  export default GameSetupScreen;
